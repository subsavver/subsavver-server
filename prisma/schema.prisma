// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED

  @@map("subscription_status")
}

enum BillingCycle {
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
  CUSTOM

  @@map("billing_cycle")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  role            String?
  banned          Boolean?           @default(false)
  banReason       String?
  banExpires      DateTime?
  subscriptions   UserSubscription[]
  Reminder        Reminder[]
  SpendingHistory SpendingHistory[]
  UserAnalytics   UserAnalytics?
  Payment         Payment[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// Service Provider Model
enum PlanType {
  FREE
  PRO
}

model SubscriptionService {
  id        String             @id @default(uuid())
  name      String             @unique
  logo      String
  category  String?
  createdBy String // Admin ID
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  users     UserSubscription[]
}

model UserSubscription {
  id          String   @id @default(uuid())
  userId      String
  serviceId   String
  planName    String?
  amount      Float
  renewalDate DateTime
  isActive    Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User                @relation(fields: [userId], references: [id])
  service      SubscriptionService @relation(fields: [serviceId], references: [id])
  reminders    Reminder[]
  spendingLogs SpendingHistory[]
}

model Reminder {
  id               String    @id @default(uuid())
  userId           String
  subscriptionId   String
  remindBeforeDays Int       @default(3)
  sent             Boolean   @default(false)
  sentAt           DateTime?
  createdAt        DateTime  @default(now())

  user         User             @relation(fields: [userId], references: [id])
  subscription UserSubscription @relation(fields: [subscriptionId], references: [id])
}

model SpendingHistory {
  id             String   @id @default(uuid())
  userId         String
  subscriptionId String
  amount         Float
  action         String // e.g. "renewal", "upgrade", "cancellation"
  date           DateTime @default(now())

  user         User             @relation(fields: [userId], references: [id])
  subscription UserSubscription @relation(fields: [subscriptionId], references: [id])
}

model UserAnalytics {
  id                 String   @id @default(uuid())
  userId             String   @unique
  totalSubscriptions Int      @default(0)
  totalSpent         Float    @default(0)
  estimatedSavings   Float    @default(0)
  lastCalculated     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Payment {
  id            String          @id @default(uuid())
  userId        String
  amount        Float
  currency      String          @default("USD")
  paymentStatus PaymentStatus   @default(PENDING)
  provider      PaymentProvider
  transactionId String?
  createdAt     DateTime        @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  MANUAL
}
